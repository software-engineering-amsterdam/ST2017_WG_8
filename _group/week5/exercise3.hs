module Lab5 where

import Data.List
import System.Random
import Lecture5

propMinimalAux :: Node -> [(Row,Column)] -> Bool
propMinimalAux n [] = uniqueSol n -- We dont want propMinimalAux n[] = True because then a blank board would be accepted
propMinimalAux n ((r,c):rcs) | uniqueSol n' = False
                             | otherwise    = propMinimalAux n rcs
  where n' = eraseN n (r,c)


propMinimal :: Node -> Bool
propMinimal n = propMinimalAux n (filledPositions (fst n))

testProps :: Int -> Int -> (Node -> Bool) -> IO ()
testProps k n f = if k == n then print (show n ++ " tests passed")
                else do
                  sud <- genRandomSudoku
                  s <- genProblem sud
                  print ("Test " ++ show k ++ " out of " ++ show n) -- Useful since the tests might take a while
                  if (f s) then
                    testProps (k+1) n f
                  else do showSudoku (fst s)
                          error ("failed on the sudoku problem above: ")

-- This might take a while. Compiling the code is advisable.
main :: IO()
main = do testProps 0 25 propMinimal

-- All tests passed so the problems generated by the code given in the lecture nodes are probably minimal

-- time: 1 hour